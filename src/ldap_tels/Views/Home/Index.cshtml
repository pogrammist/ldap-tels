@model IEnumerable<ContactViewModel>

@{
    ViewData["Title"] = "Телефонный справочник";
    Layout = "_Layout";
}

<div class="container">
    <h1 class="mb-4">Телефонный справочник</h1>

    <div class="row mb-4">
        <div class="col d-flex align-items-stretch">
            <form asp-action="Search" method="get" class="d-flex flex-grow-1 me-2">
                <input type="text" name="query" class="form-control flex-grow-1 me-2" placeholder="Поиск по имени, отделу, телефону..." value="@ViewBag.SearchQuery" id="liveSearchInput">
                <button type="button" id="clearSearchBtn" class="btn btn-primary flex-shrink-0">Очистить</button>
            </form>
            <a asp-action="Divisions" class="btn btn-outline-secondary me-2 flex-shrink-0">Подразделения</a>
            <a asp-action="Departments" class="btn btn-outline-secondary me-2 flex-shrink-0">Отделы</a>
            <a asp-action="Titles" class="btn btn-outline-secondary flex-shrink-0">Должности</a>
        </div>
    </div>

    @if (ViewBag.Department != null)
    {
        <div class="alert alert-info">
            Отдел: @ViewBag.Department
            <a asp-action="Index" class="float-end">Сбросить фильтр</a>
        </div>
    }

    @if (ViewBag.SearchQuery != null)
    {
        <div class="alert alert-info">
            Результаты поиска для: "@ViewBag.SearchQuery"
            <a asp-action="Index" class="float-end">Сбросить поиск</a>
        </div>
    }

    <div id="contacts-container"></div>
</div>

@section Scripts {
    <script src="~/js/infinite-scroll.js"></script>
    <script>
        // Debounce функция
        function debounce(func, wait) {
            let timeout;
            return function(...args) {
                clearTimeout(timeout);
                timeout = setTimeout(() => func.apply(this, args), wait);
            };
        }

        const searchInput = document.getElementById('liveSearchInput');
        const contactsContainer = document.getElementById('contacts-container');
        const clearBtn = document.getElementById('clearSearchBtn');

        function toggleClearBtn() {
            if (searchInput && clearBtn) {
                clearBtn.style.display = searchInput.value.length > 0 ? '' : 'none';
            }
        }

        async function fetchContacts(query) {
            const url = `/Home/Search?query=${encodeURIComponent(query)}`;
            const response = await fetch(url, { headers: { 'X-Requested-With': 'XMLHttpRequest' } });
            if (response.ok) {
                const html = await response.text();
                if (contactsContainer) {
                    contactsContainer.innerHTML = html;
                }
            }
        }

        if (searchInput) {
            searchInput.addEventListener('input', debounce(function(e) {
                fetchContacts(e.target.value);
                toggleClearBtn();
            }, 350));
            searchInput.addEventListener('input', toggleClearBtn);
            window.addEventListener('DOMContentLoaded', toggleClearBtn);
        }
        if (clearBtn && searchInput) {
            clearBtn.addEventListener('click', function(e) {
                e.preventDefault();
                searchInput.value = '';
                fetchContacts('');
                toggleClearBtn();
                searchInput.focus();
            });
        }
    </script>
}
