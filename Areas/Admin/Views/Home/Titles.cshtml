@model IEnumerable<ldap_tels.Models.Title>
@{
    ViewData["Title"] = "Должности";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1>Должности</h1>
    <div>
        <a asp-action="Contacts" class="btn btn-primary">
            <i class="bi bi-people"></i> Все контакты
        </a>
    </div>
</div>

@Html.AntiForgeryToken()

@if (!Model.Any())
{
    <div class="alert alert-info">
        Должности не найдены.
    </div>
}
else
{
    <div class="card mb-4">
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Должность</th>
                            <th>Приоритет</th>
                            <th>Действия</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model)
                        {
                            <tr>
                                <td>@item.Id</td>
                                <td>@item.Name</td>
                                <td>
                                    <div class="d-flex align-items-center">
                                        <button type="button" class="btn btn-sm btn-outline-secondary me-2" 
                                                onclick="changeWeight(@item.Id, -1)" 
                                                @(item.Weight <= 0 ? "disabled" : "")>
                                            <i class="bi bi-dash"></i>
                                        </button>
                                        
                                        <span id="weight-@item.Id" class="fw-bold">@item.Weight</span>
                                        
                                        <button type="button" class="btn btn-sm btn-outline-secondary ms-2" 
                                                onclick="changeWeight(@item.Id, 1)" 
                                                @(item.Weight >= 100 ? "disabled" : "")>
                                            <i class="bi bi-plus"></i>
                                        </button>
                                    </div>
                                </td>
                                <td>
                                    <a asp-action="Title" asp-route-title="@item.Name" class="btn btn-sm btn-info">
                                        <i class="bi bi-people"></i>
                                    </a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
}

<div class="mt-4">
    <a asp-action="Index" class="btn btn-secondary">Вернуться на главную</a>
</div>

@section Scripts {
    <script>
        async function changeWeight(titleId, delta) {
            try {
                // Генерируем правильный URL
                const url = '@Url.Action("UpdateTitleWeight", "Home", new { area = "Admin" })';
                
                // Отправляем запрос на сервер
                const response = await fetch(url, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({ id: titleId, delta: delta })
                });

                if (response.ok) {
                    const result = await response.json();
                    
                    if (result.success) {
                        const weightElement = document.getElementById(`weight-${titleId}`);
                        
                        // Обновляем значение на странице
                        weightElement.textContent = result.newWeight;
                        
                        // Обновляем состояние кнопок
                        const minusButton = weightElement.previousElementSibling;
                        const plusButton = weightElement.nextElementSibling;
                        
                        minusButton.disabled = result.newWeight <= 0;
                        plusButton.disabled = result.newWeight >= 100;
                        
                        // Показываем уведомление
                        showNotification('Приоритет обновлен', 'success');
                    } else {
                        throw new Error(result.error || 'Ошибка при обновлении');
                    }
                } else {
                    throw new Error('Ошибка HTTP: ' + response.status);
                }
            } catch (error) {
                console.error('Error:', error);
                showNotification('Ошибка при обновлении приоритета: ' + error.message, 'error');
            }
        }

        function showNotification(message, type) {
            // Создаем временное уведомление
            const alert = document.createElement('div');
            alert.className = `alert alert-${type === 'success' ? 'success' : 'danger'} alert-dismissible fade show position-fixed`;
            alert.style.cssText = 'top: 20px; right: 20px; z-index: 1050; min-width: 300px;';
            alert.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            
            document.body.appendChild(alert);
            
            // Автоматически скрываем через 3 секунды
            setTimeout(() => {
                if (alert.parentNode) {
                    alert.remove();
                }
            }, 3000);
        }
    </script>
}